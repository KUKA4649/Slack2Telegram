
### Описание кода SlackTelegramBot

Этот код создает класс `SlackTelegramBot`, который интегрирует Slack и Telegram для отслеживания сообщений с упоминанием бота в Slack и отправки уведомлений в Telegram. Для работы с API Slack и Telegram используются `slack_sdk` и `python-telegram-bot`.

---

### Структура кода:

1. **Импорт библиотек и загрузка переменных среды**:
   - Используются `dotenv` для загрузки конфигураций из файла `.env`.
   - `slack_sdk`, `telegram`, `asyncio` и другие библиотеки для работы с API и асинхронными операциями.
   
2. **Класс `SlackTelegramBot`**:
   - Основной класс для интеграции Slack и Telegram, инициализируется с помощью переменных окружения, таких как токены и идентификаторы чатов для обоих сервисов.

3. **Основные методы**:

   - `__init__`: Конструктор класса, инициализирует клиенты для работы со Slack и Telegram, получает идентификатор Slack пользователя и загружает эмодзи для каналов из файла `channel_emojis.json`.

   - `load_channel_emojis`: Загружает эмодзи из JSON-файла для добавления их к именам каналов в уведомлениях.

   - `get_user_id`: Получает идентификатор пользователя Slack, необходимый для фильтрации сообщений, где упомянут этот бот.

   - `process_event_queue`: Асинхронный метод для обработки событий из очереди `event_queue`. Этот метод каждые 1 секунду проверяет наличие событий в очереди и обрабатывает их.

   - `process_message`: Обрабатывает сообщения Slack и отправляет уведомления в Telegram, если бот был упомянут. Отправляемое сообщение в Telegram содержит канал, пользователя и текст сообщения Slack.

   - `socket_mode_event_handler`: Обработчик для событий Slack Socket Mode. Добавляет каждое событие в очередь для дальнейшей обработки и записывает его идентификатор в набор обработанных событий, чтобы предотвратить дублирование.

   - `start`: Запускает Socket Mode клиента Slack и асинхронный цикл обработки событий.

4. **Flask приложение**:
   - Flask используется для обработки событий Slack и проверки статуса через HTTP-запросы на `/slack/events`.
   
5. **Точка входа `__main__`**:
   - Запускает `SlackTelegramBot` и Flask-приложение на порту 3000.

---

### Инструкция по настройке

1. **Файл `.env`**:
   Создайте файл `.env` и добавьте туда следующие строки:
   ```plaintext
   SLACK_USER_TOKEN=ваш_токен_пользователя_Slack
   SLACK_APP_TOKEN=ваш_токен_приложения_Slack
   TELEGRAM_BOT_TOKEN=ваш_токен_бота_Telegram
   TELEGRAM_CHAT_ID=ваш_идентификатор_чата_Telegram
   ```

2. **Запуск**:
   - Убедитесь, что установлены необходимые библиотеки:
     ```bash
     pip install slack_sdk python-telegram-bot flask python-dotenv
     ```
   - Запустите скрипт:
     ```bash
     python ваш_файл.py
     ```

---

### Основные функции и примеры использования:

1. **Slack**: 
   - В Slack бот отслеживает упоминания (например, `@бот`).
   - Если в тексте сообщения содержится `@bot_user_id`, сообщение добавляется в очередь.

2. **Telegram**:
   - Отправка уведомлений о каждом новом упоминании из Slack в Telegram. Например:
     ```
     Канал: general, Пользователь: John Doe, Сообщение: @бот, помоги!
     ```

3. **Асинхронная обработка событий**:
   - Обеспечивает, чтобы каждое сообщение из Slack обрабатывалось без задержек для других операций.

4. **Файл `channel_emojis.json`**:
   - В JSON-файле содержатся пары `название_канала: эмодзи`, которые добавляются к именам каналов в уведомлениях.

---

### Логирование:

Логи сохраняются в файл `app.log` и включают информацию об успешной отправке сообщений и ошибках.
